{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Shawnie/Development/Spotify API Intro/frontend/src/components/WebPlayer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nvar WebPlayer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WebPlayer, _Component);\n\n  function WebPlayer(props) {\n    var _this;\n\n    _classCallCheck(this, WebPlayer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebPlayer).call(this, props));\n\n    _this.playFirstSong = function () {\n      console.log(\"playlist pressed\");\n      console.log(\"appState\", _this.props.appstate);\n      var _this$state = _this.state,\n          deviceId = _this$state.deviceId,\n          token = _this$state.token,\n          uris = _this$state.uris;\n      fetch(\"https://api.spotify.com/v1/me/player/play?device_id=\".concat(deviceId), {\n        method: \"PUT\",\n        headers: {\n          authorization: \"Bearer \".concat(token),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          \"uris\": [_this.props.appstate.playlistSongs[0].spotify_url]\n        })\n      }).then(function (response) {\n        console.log('Success:', JSON.stringify(response));\n\n        _this.setState({\n          startTime: Date.now()\n        }, function () {\n          console.log(Date.now());\n        });\n      }).catch(function (error) {\n        return console.error('Error:', error);\n      });\n    };\n\n    _this.deleteFinishedSong = function () {\n      console.log(\"playlist pressed\");\n      console.log(\"appState\", _this.props.appstate);\n      var _this$state2 = _this.state,\n          deviceId = _this$state2.deviceId,\n          token = _this$state2.token,\n          uris = _this$state2.uris;\n      fetch(\"http://localhost:3000/api/v1/tracks/\".concat(_this.props.appstate.playlistSongs[0].id), {\n        method: 'DELETE' // or 'PUT'\n\n      }).then(function (response) {\n        return console.log('Success:', JSON.stringify(response));\n      }).catch(function (error) {\n        return console.error('Error:', error);\n      });\n    };\n\n    _this.state = {\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0,\n      uris: [],\n      startTime: null\n    };\n    _this.playerCheckInterval = null;\n    return _this;\n  }\n\n  _createClass(WebPlayer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"http://localhost:3000/api/v1/users/1\", {\n        method: 'GET',\n        // or 'PUT'\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (response) {\n        _this2.setState({\n          token: response[\"access_token\"]\n        }, function () {\n          _this2.handleLogin();\n        });\n      });\n    } // 'BQC3d17lk_YbAr3sNN5IBMENQuvhqwiChcQfrhuhm8Y6IdAUwrIYDikRYolHJCi37eJL85-K-Dy8sIWVAOlRaUQaK0S7Wc88PF28feUklsqKU89rl3NQhMJoCpBFJTTsETGKe3dTLxmzqkL9wwDtOspDfObQ8PcnDptCJ6pL'\n\n  }, {\n    key: \"handleLogin\",\n    value: function handleLogin() {\n      var _this3 = this;\n\n      if (this.state.token !== \"\") {\n        this.setState({\n          loggedIn: true\n        }); // check every second for the player.\n\n        this.playerCheckInterval = setInterval(function () {\n          return _this3.checkForPlayer();\n        }, 1000); // this.checkForPlayer()\n      }\n    }\n  }, {\n    key: \"checkForPlayer\",\n    value: function checkForPlayer() {\n      var token = this.state.token;\n\n      if (window.Spotify) {\n        clearInterval(this.playerCheckInterval);\n        this.player = new window.Spotify.Player({\n          name: \"Shawna's New Spotify Player\",\n          getOAuthToken: function getOAuthToken(cb) {\n            cb(token);\n          }\n        });\n        this.createEventHandlers(); // finally, connect!\n\n        this.player.connect();\n      }\n    }\n  }, {\n    key: \"createEventHandlers\",\n    value: function createEventHandlers() {\n      var _this4 = this;\n\n      this.player.on('initialization_error', function (e) {\n        console.error(e);\n      });\n      this.player.on('authentication_error', function (e) {\n        console.error(e);\n\n        _this4.setState({\n          loggedIn: false\n        });\n      });\n      this.player.on('account_error', function (e) {\n        console.error(e);\n      });\n      this.player.on('playback_error', function (e) {\n        console.error(e);\n      }); // Playback status updates\n      // this.player.on('player_state_changed', state => this.onStateChanged(state));\n\n      this.player.on('player_state_changed', function (state) {\n        return _this4.settingStateofNewSong(state);\n      }); // this.player.on('ready', data => {\n      //   console.log(data)\n      //   let { device_id } = data;\n      //   console.log(\"Let the music play on!\");\n      //   this.setState({ deviceId: device_id });\n      // });\n      // Ready\n\n      this.player.on('ready',\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(data) {\n          var device_id;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  device_id = data.device_id;\n                  console.log(\"Let the music play on!\");\n                  _context.next = 4;\n                  return _this4.setState({\n                    deviceId: device_id\n                  });\n\n                case 4:\n                  _this4.transferPlaybackHere();\n\n                  _this4.playFirstSong();\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"transferPlaybackHere\",\n    value: function transferPlaybackHere() {\n      var _this$state3 = this.state,\n          deviceId = _this$state3.deviceId,\n          token = _this$state3.token;\n      fetch(\"https://api.spotify.com/v1/me/player\", {\n        method: \"PUT\",\n        headers: {\n          authorization: \"Bearer \".concat(token),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          \"device_ids\": [deviceId],\n          \"play\": true\n        })\n      });\n      this.getCurrentStateEverySecond();\n    }\n  }, {\n    key: \"onStateChanged\",\n    value: function onStateChanged(state) {\n      // if we're no longer listening to music, we'll get a null state.\n      console.log(state);\n\n      if (state !== null) {\n        var currentTrack = state.track_window.current_track;\n        var position = state.position,\n            duration = state.duration;\n        var trackName = currentTrack.name;\n        var albumName = currentTrack.album.name;\n        var artistName = currentTrack.artists.map(function (artist) {\n          return artist.name;\n        }).join(\", \");\n        var playing = !state.paused;\n        this.setState({\n          position: position,\n          duration: duration,\n          trackName: trackName,\n          albumName: albumName,\n          artistName: artistName,\n          playing: playing\n        });\n      }\n    }\n  }, {\n    key: \"settingStateofNewSong\",\n    value: function settingStateofNewSong(state) {\n      var _this5 = this;\n\n      // if we're no longer listening to music, we'll get a null state.\n      ////first song to change to after playback transfer\n      if (state !== null && state.position == 0 && state.paused == false && state.duration == this.state.duration || state !== null && state.position == 0 && state.playing == true || state !== null && state.position == 0 && this.state.duration !== 0) {\n        console.log(\"duration\", this.state.duration);\n        var currentTrack = state.track_window.current_track;\n        var position = state.position,\n            duration = state.duration;\n        var trackName = currentTrack.name;\n        var albumName = currentTrack.album.name;\n        var artistName = currentTrack.artists.map(function (artist) {\n          return artist.name;\n        }).join(\", \");\n        var playing = !state.paused;\n        console.log(\"running settingStateofNewSongFirstSong\", state);\n        this.setState({\n          position: position,\n          duration: duration,\n          trackName: trackName,\n          albumName: albumName,\n          artistName: artistName,\n          playing: playing\n        }, function () {\n          console.log(\"settingStateofNewSong\", _this5.state);\n          setTimeout(function () {\n            return _this5.playFirstSong();\n          }, 3000 + duration);\n          setTimeout(function () {\n            return _this5.deleteFinishedSong();\n          }, duration);\n        });\n      } ////paused state after playback transfer\n      else if (state !== null) {\n          debugger;\n          var _currentTrack = state.track_window.current_track;\n          var _position = state.position,\n              _duration = state.duration;\n          var _trackName = _currentTrack.name;\n          var _albumName = _currentTrack.album.name;\n\n          var _artistName = _currentTrack.artists.map(function (artist) {\n            return artist.name;\n          }).join(\", \");\n\n          var _playing = !state.paused;\n\n          this.setState({\n            position: _position,\n            duration: _duration,\n            trackName: _trackName,\n            albumName: _albumName,\n            artistName: _artistName,\n            playing: _playing\n          });\n          console.log(\"first playback\", this.state);\n        }\n    }\n  }, {\n    key: \"playRoomPlaylist\",\n    value: function playRoomPlaylist() {\n      console.log(\"playlist pressed\");\n      console.log(\"appState\", this.props.appstate);\n      var _this$state4 = this.state,\n          deviceId = _this$state4.deviceId,\n          token = _this$state4.token,\n          uris = _this$state4.uris;\n      fetch(\"https://api.spotify.com/v1/me/player/play?device_id=\".concat(deviceId), {\n        method: \"PUT\",\n        headers: {\n          authorization: \"Bearer \".concat(token),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          \"uris\": this.props.appstate.playlistSongs.map(function (uriobject) {\n            return uriobject.spotify_url;\n          })\n        })\n      }).then(function (result) {\n        return result.json();\n      }).then(function (tracks) {\n        console.log(tracks);\n      });\n    }\n  }, {\n    key: \"getCurrentPlayerState\",\n    value: function getCurrentPlayerState() {\n      var _this6 = this;\n\n      this.player.getCurrentState().then(function (state) {\n        if (!state) {\n          console.error('User is not playing music through the Web Playback SDK');\n          return;\n        } else {\n          var currentTrack = state.track_window.current_track;\n          var position = state.position,\n              duration = state.duration;\n          var trackName = currentTrack.name;\n          var albumName = currentTrack.album.name;\n          var artistName = currentTrack.artists.map(function (artist) {\n            return artist.name;\n          }).join(\", \");\n          var playing = !state.paused;\n\n          _this6.setState({\n            position: position,\n            duration: duration,\n            trackName: trackName,\n            albumName: albumName,\n            artistName: artistName,\n            playing: playing\n          }); // console.log(this.state)\n\n        }\n      });\n    }\n  }, {\n    key: \"getCurrentStateEverySecond\",\n    value: function getCurrentStateEverySecond() {\n      var _this7 = this;\n\n      setInterval(function () {\n        return _this7.getCurrentPlayerState();\n      }, 1000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state5 = this.state,\n          token = _this$state5.token,\n          loggedIn = _this$state5.loggedIn,\n          artistName = _this$state5.artistName,\n          trackName = _this$state5.trackName,\n          albumName = _this$state5.albumName,\n          error = _this$state5.error,\n          position = _this$state5.position,\n          duration = _this$state5.duration,\n          playing = _this$state5.playing;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }, \"Artist: \", artistName), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }, \"Track: \", trackName), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }, \"Album: \", albumName));\n    } //end of render\n\n  }]);\n\n  return WebPlayer;\n}(Component); //component end\n\n\nexport default WebPlayer;","map":{"version":3,"sources":["/Users/Shawnie/Development/Spotify API Intro/frontend/src/components/WebPlayer.js"],"names":["React","Component","connect","WebPlayer","props","playFirstSong","console","log","appstate","state","deviceId","token","uris","fetch","method","headers","authorization","body","JSON","stringify","playlistSongs","spotify_url","then","response","setState","startTime","Date","now","catch","error","deleteFinishedSong","id","loggedIn","trackName","artistName","albumName","playing","position","duration","playerCheckInterval","res","json","handleLogin","setInterval","checkForPlayer","window","Spotify","clearInterval","player","Player","name","getOAuthToken","cb","createEventHandlers","on","e","settingStateofNewSong","data","device_id","transferPlaybackHere","getCurrentStateEverySecond","currentTrack","track_window","current_track","album","artists","map","artist","join","paused","setTimeout","uriobject","result","tracks","getCurrentState","getCurrentPlayerState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux'\n\n\nclass WebPlayer extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0,\n      uris: [],\n      startTime: null\n    };\n\n\n\n    this.playerCheckInterval = null;\n\n  }\n  componentDidMount(){\n\n    fetch(\"http://localhost:3000/api/v1/users/1\", {\n      method: 'GET', // or 'PUT'\n      headers:{\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json())\n    .then(response => {\n      this.setState({token: response[\"access_token\"]\n         }, () => {\n        this.handleLogin()\n      })\n    })\n  }\n  // 'BQC3d17lk_YbAr3sNN5IBMENQuvhqwiChcQfrhuhm8Y6IdAUwrIYDikRYolHJCi37eJL85-K-Dy8sIWVAOlRaUQaK0S7Wc88PF28feUklsqKU89rl3NQhMJoCpBFJTTsETGKe3dTLxmzqkL9wwDtOspDfObQ8PcnDptCJ6pL'\n\n  handleLogin() {\n    if (this.state.token !== \"\") {\n      this.setState({ loggedIn: true });\n      // check every second for the player.\n      this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n      // this.checkForPlayer()\n    }\n  }\n\n  checkForPlayer() {\n    const { token } = this.state;\n\n    if (window.Spotify) {\n           clearInterval(this.playerCheckInterval);\n\n      this.player = new window.Spotify.Player({\n        name: \"Shawna's New Spotify Player\",\n        getOAuthToken: cb => { cb(token); },\n      });\n\n       this.createEventHandlers();\n\n      // finally, connect!\n      this.player.connect();\n    }\n  }\n\n\n  createEventHandlers() {\n\n    this.player.on('initialization_error', e => { console.error(e); });\n    this.player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({ loggedIn: false });\n    });\n    this.player.on('account_error', e => { console.error(e); });\n    this.player.on('playback_error', e => { console.error(e); });\n\n    // Playback status updates\n    // this.player.on('player_state_changed', state => this.onStateChanged(state));\n    this.player.on('player_state_changed', state => this.settingStateofNewSong(state));\n\n\n     // this.player.on('ready', data => {\n     //   console.log(data)\n     //   let { device_id } = data;\n     //   console.log(\"Let the music play on!\");\n     //   this.setState({ deviceId: device_id });\n     // });\n    // Ready\n    this.player.on('ready', async data => {\n      let { device_id } = data;\n      console.log(\"Let the music play on!\");\n      await this.setState({ deviceId: device_id });\n      this.transferPlaybackHere();\n      this.playFirstSong();\n    });\n\n\n  }\n\n\n\n  transferPlaybackHere() {\n  const { deviceId, token } = this.state;\n  fetch(\"https://api.spotify.com/v1/me/player\", {\n    method: \"PUT\",\n    headers: {\n      authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      \"device_ids\": [ deviceId ],\n      \"play\": true,\n    }),\n  });\n  this.getCurrentStateEverySecond();\n}\n\nonStateChanged(state) {\n  // if we're no longer listening to music, we'll get a null state.\n\n\n  console.log(state)\n  if (state !== null) {\n    let {\n          current_track: currentTrack,\n        } = state.track_window;\n      let {\n              position,\n              duration,\n            } = state;\n\n    const trackName = currentTrack.name;\n    const albumName = currentTrack.album.name;\n    const artistName = currentTrack.artists\n      .map(artist => artist.name)\n      .join(\", \");\n    const playing = !state.paused;\n    this.setState({\n      position,\n      duration,\n      trackName,\n      albumName,\n      artistName,\n      playing\n\n    });\n  }\n}\n\nsettingStateofNewSong(state) {\n  // if we're no longer listening to music, we'll get a null state.\n\n////first song to change to after playback transfer\nif ((state !== null && state.position == 0 && state.paused == false && state.duration == this.state.duration) || (state !== null && state.position == 0 && state.playing == true) || (state !== null && state.position == 0 && this.state.duration !== 0)){\n  console.log(\"duration\", this.state.duration)\n\n  let {\n        current_track: currentTrack,\n      } = state.track_window;\n    let {\n            position,\n            duration,\n          } = state;\n\n  const trackName = currentTrack.name;\n  const albumName = currentTrack.album.name;\n  const artistName = currentTrack.artists\n    .map(artist => artist.name)\n    .join(\", \");\n  const playing = !state.paused;\n  console.log(\"running settingStateofNewSongFirstSong\", state)\n  this.setState({\n    position,\n    duration,\n    trackName,\n    albumName,\n    artistName,\n    playing\n\n  }, ()=>{\n    console.log(\"settingStateofNewSong\", this.state)\n\n        setTimeout(() => this.playFirstSong(), 3000 + duration)\n        setTimeout(() => this.deleteFinishedSong(), duration)\n  });\n\n}\n////paused state after playback transfer\nelse if (state !== null) {\n  debugger\n    let {\n          current_track: currentTrack,\n        } = state.track_window;\n      let {\n              position,\n              duration,\n            } = state;\n\n    const trackName = currentTrack.name;\n    const albumName = currentTrack.album.name;\n    const artistName = currentTrack.artists\n      .map(artist => artist.name)\n      .join(\", \");\n    const playing = !state.paused;\n    this.setState({\n      position,\n      duration,\n      trackName,\n      albumName,\n      artistName,\n      playing\n\n    });\n    console.log(\"first playback\", this.state)\n  }\n}\n\nplayFirstSong = () => {\n  console.log(\"playlist pressed\")\n  console.log(\"appState\", this.props.appstate)\n  const { deviceId, token, uris} = this.state;\n\n  fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {\n    method: \"PUT\",\n    headers: {\n      authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n\n      \"uris\": [this.props.appstate.playlistSongs[0].spotify_url]\n    })\n  })\n  .then(response => {\n    console.log('Success:', JSON.stringify(response))\n    this.setState({startTime: Date.now()}, ()=>{\n      console.log(Date.now())\n    });\n\n\n\n\n\n    })\n  .catch(error => console.error('Error:', error));\n\n}\n\ndeleteFinishedSong = () => {\n  console.log(\"playlist pressed\")\n  console.log(\"appState\", this.props.appstate)\n  const { deviceId, token, uris} = this.state;\n\n\n\n\n  fetch(`http://localhost:3000/api/v1/tracks/${this.props.appstate.playlistSongs[0].id}`, {\n    method: 'DELETE'// or 'PUT'\n  })\n  .then(response => console.log('Success:', JSON.stringify(response)))\n  .catch(error => console.error('Error:', error));\n\n}\n\nplayRoomPlaylist() {\n  console.log(\"playlist pressed\")\n  console.log(\"appState\", this.props.appstate)\n  const { deviceId, token, uris } = this.state;\n\n\n  fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {\n    method: \"PUT\",\n    headers: {\n      authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      \"uris\": this.props.appstate.playlistSongs.map((uriobject)=>{\n        return uriobject.spotify_url})\n    })\n  })\n  .then(result => result.json())\n  .then((tracks) =>{\n\n    console.log(tracks)\n  })\n\n}\n\ngetCurrentPlayerState(){\n  this.player.getCurrentState().then(state => {\n\n    if (!state) {\n      console.error('User is not playing music through the Web Playback SDK');\n      return;\n    } else {\n      let {\n            current_track: currentTrack,\n          } = state.track_window;\n        let {\n                position,\n                duration,\n              } = state;\n\n\n          const trackName = currentTrack.name;\n          const albumName = currentTrack.album.name;\n          const artistName = currentTrack.artists\n            .map(artist => artist.name)\n            .join(\", \");\n          const playing = !state.paused;\n          this.setState({\n            position,\n            duration,\n            trackName,\n            albumName,\n            artistName,\n            playing\n\n          });\n           // console.log(this.state)\n        }\n    })\n}\n\ngetCurrentStateEverySecond() {\n\n    setInterval(() => this.getCurrentPlayerState(), 1000);\n\n}\n\n\n\n\n\n\n  render() {\n\n    const {\n      token,\n      loggedIn,\n      artistName,\n      trackName,\n      albumName,\n      error,\n      position,\n      duration,\n      playing,\n    } = this.state;\n\n  return (\n        <div>\n              <p>Artist: {artistName}</p>\n              <p>Track: {trackName}</p>\n              <p>Album: {albumName}</p>\n        </div>\n\n\n      );\n  }//end of render\n}//component end\n\nexport default WebPlayer;\n"]},"metadata":{},"sourceType":"module"}