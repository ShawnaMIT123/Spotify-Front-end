{"ast":null,"code":"import _objectSpread from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/Shawnie/Development/Spotify API Intro/frontend/src/ReactLibrary.js\";\nimport _ from 'lodash';\nimport cx from 'classnames';\nimport React, { cloneElement, isValidElement } from 'react'; // ============================================================\n// Factories\n// ============================================================\n\n/**\n * A more robust React.createElement. It can create elements from primitive values.\n *\n * @param {function|string} Component A ReactClass or string\n * @param {function} mapValueToProps A function that maps a primitive value to the Component props\n * @param {string|object|function} val The value to create a ReactElement from\n * @param {Object} [options={}]\n * @param {object} [options.defaultProps={}] Default props object\n * @param {object|function} [options.overrideProps={}] Override props object or function (called with regular props)\n * @param {boolean} [options.autoGenerateKey=true] Whether or not automatic key generation is allowed\n * @returns {object|null}\n */\n\nexport function createShorthand(Component, mapValueToProps, val) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (typeof Component !== 'function' && typeof Component !== 'string') {\n    throw new Error('createShorthand() Component must be a string or function.');\n  } // short circuit noop values\n\n\n  if (_.isNil(val) || _.isBoolean(val)) return null;\n\n  var valIsString = _.isString(val);\n\n  var valIsNumber = _.isNumber(val);\n\n  var valIsFunction = _.isFunction(val);\n\n  var valIsReactElement = isValidElement(val);\n\n  var valIsPropsObject = _.isPlainObject(val);\n\n  var valIsPrimitiveValue = valIsString || valIsNumber || _.isArray(val); // unhandled type return null\n\n  /* eslint-disable no-console */\n\n\n  if (!valIsFunction && !valIsReactElement && !valIsPropsObject && !valIsPrimitiveValue) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(['Shorthand value must be a string|number|array|object|ReactElement|function.', ' Use null|undefined|boolean for none', \" Received \".concat(typeof val, \".\")].join(''));\n    }\n\n    return null;\n  }\n  /* eslint-enable no-console */\n  // ----------------------------------------\n  // Build up props\n  // ----------------------------------------\n\n\n  var _options$defaultProps = options.defaultProps,\n      defaultProps = _options$defaultProps === void 0 ? {} : _options$defaultProps; // User's props\n\n  var usersProps = valIsReactElement && val.props || valIsPropsObject && val || valIsPrimitiveValue && mapValueToProps(val); // Override props\n\n  var _options$overrideProp = options.overrideProps,\n      overrideProps = _options$overrideProp === void 0 ? {} : _options$overrideProp;\n  overrideProps = _.isFunction(overrideProps) ? overrideProps(_objectSpread({}, defaultProps, usersProps)) : overrideProps; // Merge props\n\n  /* eslint-disable react/prop-types */\n\n  var props = _objectSpread({}, defaultProps, usersProps, overrideProps); // Merge className\n\n\n  if (defaultProps.className || overrideProps.className || usersProps.className) {\n    var mergedClassesNames = cx(defaultProps.className, overrideProps.className, usersProps.className);\n    props.className = _.uniq(mergedClassesNames.split(' ')).join(' ');\n  } // Merge style\n\n\n  if (defaultProps.style || overrideProps.style || usersProps.style) {\n    props.style = _objectSpread({}, defaultProps.style, usersProps.style, overrideProps.style);\n  } // ----------------------------------------\n  // Get key\n  // ----------------------------------------\n  // Use key, childKey, or generate key\n\n\n  if (_.isNil(props.key)) {\n    var childKey = props.childKey;\n    var _options$autoGenerate = options.autoGenerateKey,\n        autoGenerateKey = _options$autoGenerate === void 0 ? true : _options$autoGenerate;\n\n    if (!_.isNil(childKey)) {\n      // apply and consume the childKey\n      props.key = typeof childKey === 'function' ? childKey(props) : childKey;\n      delete props.childKey;\n    } else if (autoGenerateKey && (valIsString || valIsNumber)) {\n      // use string/number shorthand values as the key\n      props.key = val;\n    }\n  } // ----------------------------------------\n  // Create Element\n  // ----------------------------------------\n  // Clone ReactElements\n\n\n  if (valIsReactElement) return cloneElement(val, props); // Create ReactElements from built up props\n\n  if (valIsPrimitiveValue || valIsPropsObject) return React.createElement(Component, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  })); // Call functions with args similar to createElement()\n\n  if (valIsFunction) return val(Component, props, props.children);\n  /* eslint-enable react/prop-types */\n} // ============================================================\n// Factory Creators\n// ============================================================\n\n/**\n * Creates a `createShorthand` function that is waiting for a value and options.\n *\n * @param {function|string} Component A ReactClass or string\n * @param {function} mapValueToProps A function that maps a primitive value to the Component props\n * @returns {function} A shorthand factory function waiting for `val` and `defaultProps`.\n */\n\nexport function createShorthandFactory(Component, mapValueToProps) {\n  if (typeof Component !== 'function' && typeof Component !== 'string') {\n    throw new Error('createShorthandFactory() Component must be a string or function.');\n  }\n\n  return function (val, options) {\n    return createShorthand(Component, mapValueToProps, val, options);\n  };\n} // ============================================================\n// HTML Factories\n// ============================================================\n\nexport var createHTMLDivision = createShorthandFactory('div', function (val) {\n  return {\n    children: val\n  };\n});\nexport var createHTMLIframe = createShorthandFactory('iframe', function (src) {\n  return {\n    src: src\n  };\n});\nexport var createHTMLImage = createShorthandFactory('img', function (val) {\n  return {\n    src: val\n  };\n});\nexport var createHTMLInput = createShorthandFactory('input', function (val) {\n  return {\n    type: val\n  };\n});\nexport var createHTMLLabel = createShorthandFactory('label', function (val) {\n  return {\n    children: val\n  };\n});\nexport var createHTMLParagraph = createShorthandFactory('p', function (val) {\n  return {\n    children: val\n  };\n});","map":{"version":3,"sources":["/Users/Shawnie/Development/Spotify API Intro/frontend/src/ReactLibrary.js"],"names":["_","cx","React","cloneElement","isValidElement","createShorthand","Component","mapValueToProps","val","options","Error","isNil","isBoolean","valIsString","isString","valIsNumber","isNumber","valIsFunction","isFunction","valIsReactElement","valIsPropsObject","isPlainObject","valIsPrimitiveValue","isArray","process","env","NODE_ENV","console","error","join","defaultProps","usersProps","props","overrideProps","className","mergedClassesNames","uniq","split","style","key","childKey","autoGenerateKey","children","createShorthandFactory","createHTMLDivision","createHTMLIframe","src","createHTMLImage","createHTMLInput","type","createHTMLLabel","createHTMLParagraph"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport cx from 'classnames'\nimport React, { cloneElement, isValidElement } from 'react'\n\n// ============================================================\n// Factories\n// ============================================================\n\n/**\n * A more robust React.createElement. It can create elements from primitive values.\n *\n * @param {function|string} Component A ReactClass or string\n * @param {function} mapValueToProps A function that maps a primitive value to the Component props\n * @param {string|object|function} val The value to create a ReactElement from\n * @param {Object} [options={}]\n * @param {object} [options.defaultProps={}] Default props object\n * @param {object|function} [options.overrideProps={}] Override props object or function (called with regular props)\n * @param {boolean} [options.autoGenerateKey=true] Whether or not automatic key generation is allowed\n * @returns {object|null}\n */\nexport function createShorthand(Component, mapValueToProps, val, options = {}) {\n  if (typeof Component !== 'function' && typeof Component !== 'string') {\n    throw new Error('createShorthand() Component must be a string or function.')\n  }\n  // short circuit noop values\n  if (_.isNil(val) || _.isBoolean(val)) return null\n\n  const valIsString = _.isString(val)\n  const valIsNumber = _.isNumber(val)\n  const valIsFunction = _.isFunction(val)\n  const valIsReactElement = isValidElement(val)\n  const valIsPropsObject = _.isPlainObject(val)\n  const valIsPrimitiveValue = valIsString || valIsNumber || _.isArray(val)\n\n  // unhandled type return null\n  /* eslint-disable no-console */\n  if (!valIsFunction && !valIsReactElement && !valIsPropsObject && !valIsPrimitiveValue) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(\n        [\n          'Shorthand value must be a string|number|array|object|ReactElement|function.',\n          ' Use null|undefined|boolean for none',\n          ` Received ${typeof val}.`,\n        ].join(''),\n      )\n    }\n    return null\n  }\n  /* eslint-enable no-console */\n\n  // ----------------------------------------\n  // Build up props\n  // ----------------------------------------\n  const { defaultProps = {} } = options\n\n  // User's props\n  const usersProps =\n    (valIsReactElement && val.props) ||\n    (valIsPropsObject && val) ||\n    (valIsPrimitiveValue && mapValueToProps(val))\n\n  // Override props\n  let { overrideProps = {} } = options\n  overrideProps = _.isFunction(overrideProps)\n    ? overrideProps({ ...defaultProps, ...usersProps })\n    : overrideProps\n\n  // Merge props\n  /* eslint-disable react/prop-types */\n  const props = { ...defaultProps, ...usersProps, ...overrideProps }\n\n  // Merge className\n  if (defaultProps.className || overrideProps.className || usersProps.className) {\n    const mergedClassesNames = cx(\n      defaultProps.className,\n      overrideProps.className,\n      usersProps.className,\n    )\n    props.className = _.uniq(mergedClassesNames.split(' ')).join(' ')\n  }\n\n  // Merge style\n  if (defaultProps.style || overrideProps.style || usersProps.style) {\n    props.style = { ...defaultProps.style, ...usersProps.style, ...overrideProps.style }\n  }\n\n  // ----------------------------------------\n  // Get key\n  // ----------------------------------------\n\n  // Use key, childKey, or generate key\n  if (_.isNil(props.key)) {\n    const { childKey } = props\n    const { autoGenerateKey = true } = options\n\n    if (!_.isNil(childKey)) {\n      // apply and consume the childKey\n      props.key = typeof childKey === 'function' ? childKey(props) : childKey\n      delete props.childKey\n    } else if (autoGenerateKey && (valIsString || valIsNumber)) {\n      // use string/number shorthand values as the key\n      props.key = val\n    }\n  }\n\n  // ----------------------------------------\n  // Create Element\n  // ----------------------------------------\n\n  // Clone ReactElements\n  if (valIsReactElement) return cloneElement(val, props)\n\n  // Create ReactElements from built up props\n  if (valIsPrimitiveValue || valIsPropsObject) return <Component {...props} />\n\n  // Call functions with args similar to createElement()\n  if (valIsFunction) return val(Component, props, props.children)\n  /* eslint-enable react/prop-types */\n}\n\n// ============================================================\n// Factory Creators\n// ============================================================\n\n/**\n * Creates a `createShorthand` function that is waiting for a value and options.\n *\n * @param {function|string} Component A ReactClass or string\n * @param {function} mapValueToProps A function that maps a primitive value to the Component props\n * @returns {function} A shorthand factory function waiting for `val` and `defaultProps`.\n */\nexport function createShorthandFactory(Component, mapValueToProps) {\n  if (typeof Component !== 'function' && typeof Component !== 'string') {\n    throw new Error('createShorthandFactory() Component must be a string or function.')\n  }\n\n  return (val, options) => createShorthand(Component, mapValueToProps, val, options)\n}\n\n// ============================================================\n// HTML Factories\n// ============================================================\nexport const createHTMLDivision = createShorthandFactory('div', val => ({ children: val }))\nexport const createHTMLIframe = createShorthandFactory('iframe', src => ({ src }))\nexport const createHTMLImage = createShorthandFactory('img', val => ({ src: val }))\nexport const createHTMLInput = createShorthandFactory('input', val => ({ type: val }))\nexport const createHTMLLabel = createShorthandFactory('label', val => ({ children: val }))\nexport const createHTMLParagraph = createShorthandFactory('p', val => ({ children: val }))\n"]},"metadata":{},"sourceType":"module"}