{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Shawnie/Development/Spotify API Intro/frontend/src/components/WebPlayer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nvar WebPlayer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WebPlayer, _Component);\n\n  function WebPlayer(props) {\n    var _this;\n\n    _classCallCheck(this, WebPlayer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebPlayer).call(this, props));\n    _this.state = {\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0,\n      uris: []\n    };\n    _this.playerCheckInterval = null;\n    return _this;\n  }\n\n  _createClass(WebPlayer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"http://localhost:3000/api/v1/users/1\", {\n        method: 'GET',\n        // or 'PUT'\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (response) {\n        _this2.setState({\n          token: response[\"access_token\"]\n        }, function () {\n          _this2.handleLogin();\n        });\n      });\n    } // 'BQC3d17lk_YbAr3sNN5IBMENQuvhqwiChcQfrhuhm8Y6IdAUwrIYDikRYolHJCi37eJL85-K-Dy8sIWVAOlRaUQaK0S7Wc88PF28feUklsqKU89rl3NQhMJoCpBFJTTsETGKe3dTLxmzqkL9wwDtOspDfObQ8PcnDptCJ6pL'\n\n  }, {\n    key: \"handleLogin\",\n    value: function handleLogin() {\n      var _this3 = this;\n\n      if (this.state.token !== \"\") {\n        this.setState({\n          loggedIn: true\n        }); // check every second for the player.\n\n        this.playerCheckInterval = setInterval(function () {\n          return _this3.checkForPlayer();\n        }, 1000); // this.checkForPlayer()\n      }\n    }\n  }, {\n    key: \"checkForPlayer\",\n    value: function checkForPlayer() {\n      var token = this.state.token;\n\n      if (window.Spotify) {\n        clearInterval(this.playerCheckInterval);\n        this.player = new window.Spotify.Player({\n          name: \"Shawna's New Spotify Player\",\n          getOAuthToken: function getOAuthToken(cb) {\n            cb(token);\n          }\n        });\n        this.createEventHandlers(); // finally, connect!\n\n        this.player.connect();\n      }\n    }\n  }, {\n    key: \"createEventHandlers\",\n    value: function createEventHandlers() {\n      var _this4 = this;\n\n      this.player.on('initialization_error', function (e) {\n        console.error(e);\n      });\n      this.player.on('authentication_error', function (e) {\n        console.error(e);\n\n        _this4.setState({\n          loggedIn: false\n        });\n      });\n      this.player.on('account_error', function (e) {\n        console.error(e);\n      });\n      this.player.on('playback_error', function (e) {\n        console.error(e);\n      }); // Playback status updates\n\n      this.player.on('player_state_changed', function (state) {\n        return _this4.onStateChanged(state);\n      });\n      this.player.on('player_state_changed', function (state) {\n        console.log(state);\n      });\n      this.player.on('ready', function (data) {\n        console.log(data);\n        var device_id = data.device_id;\n        console.log(\"Let the music play on!\");\n\n        _this4.setState({\n          deviceId: device_id\n        });\n      }); // Ready\n\n      this.player.on('ready',\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(data) {\n          var device_id;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  device_id = data.device_id;\n                  console.log(\"Let the music play on!\");\n                  _context.next = 4;\n                  return _this4.setState({\n                    deviceId: device_id\n                  });\n\n                case 4:\n                  _this4.transferPlaybackHere();\n\n                  _this4.playRoomPlaylist();\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"transferPlaybackHere\",\n    value: function transferPlaybackHere() {\n      var _this$state = this.state,\n          deviceId = _this$state.deviceId,\n          token = _this$state.token;\n      fetch(\"https://api.spotify.com/v1/me/player\", {\n        method: \"PUT\",\n        headers: {\n          authorization: \"Bearer \".concat(token),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          \"device_ids\": [deviceId],\n          \"play\": true\n        })\n      });\n    }\n  }, {\n    key: \"onStateChanged\",\n    value: function onStateChanged(state) {\n      // if we're no longer listening to music, we'll get a null state.\n      if (state !== null) {\n        var _state$track_window = state.track_window,\n            currentTrack = _state$track_window.current_track,\n            position = _state$track_window.position,\n            duration = _state$track_window.duration;\n        var trackName = currentTrack.name;\n        var albumName = currentTrack.album.name;\n        var artistName = currentTrack.artists.map(function (artist) {\n          return artist.name;\n        }).join(\", \");\n        var playing = !state.paused;\n        this.setState({\n          position: position,\n          duration: duration,\n          trackName: trackName,\n          albumName: albumName,\n          artistName: artistName,\n          playing: playing\n        });\n      }\n    }\n  }, {\n    key: \"playRoomPlaylist\",\n    value: function playRoomPlaylist() {\n      console.log(\"playlist pressed\");\n      console.log(\"appState\", this.props.appState);\n      var _this$state2 = this.state,\n          deviceId = _this$state2.deviceId,\n          token = _this$state2.token,\n          uris = _this$state2.uris;\n      fetch(\"https://api.spotify.com/v1/me/player/play?device_id=\".concat(deviceId), {\n        method: \"PUT\",\n        headers: {\n          authorization: \"Bearer \".concat(token),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          \"uris\": this.props.appstate.playlistSongs.map(function (uriobject) {\n            return uriobject.spotify_url;\n          })\n        })\n      }).then(function (result) {\n        return result.json();\n      }).then(function (tracks) {\n        console.log(tracks);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          token = _this$state3.token,\n          loggedIn = _this$state3.loggedIn,\n          artistName = _this$state3.artistName,\n          trackName = _this$state3.trackName,\n          albumName = _this$state3.albumName,\n          error = _this$state3.error,\n          position = _this$state3.position,\n          duration = _this$state3.duration,\n          playing = _this$state3.playing;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"Artist: \", artistName), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, \"Track: \", trackName), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Album: \", albumName));\n    } //end of render\n\n  }]);\n\n  return WebPlayer;\n}(Component); //component end\n\n\nexport default WebPlayer;","map":{"version":3,"sources":["/Users/Shawnie/Development/Spotify API Intro/frontend/src/components/WebPlayer.js"],"names":["React","Component","connect","WebPlayer","props","state","token","deviceId","loggedIn","error","trackName","artistName","albumName","playing","position","duration","uris","playerCheckInterval","fetch","method","headers","then","res","json","response","setState","handleLogin","setInterval","checkForPlayer","window","Spotify","clearInterval","player","Player","name","getOAuthToken","cb","createEventHandlers","on","e","console","onStateChanged","log","data","device_id","transferPlaybackHere","playRoomPlaylist","authorization","body","JSON","stringify","track_window","currentTrack","current_track","album","artists","map","artist","join","paused","appState","appstate","playlistSongs","uriobject","spotify_url","result","tracks"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux'\n\n\nclass WebPlayer extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0,\n      uris: []\n    };\n\n\n\n    this.playerCheckInterval = null;\n\n  }\n  componentDidMount(){\n\n    fetch(\"http://localhost:3000/api/v1/users/1\", {\n      method: 'GET', // or 'PUT'\n      headers:{\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json())\n    .then(response => {\n      this.setState({token: response[\"access_token\"]\n         }, () => {\n        this.handleLogin()\n      })\n    })\n  }\n  // 'BQC3d17lk_YbAr3sNN5IBMENQuvhqwiChcQfrhuhm8Y6IdAUwrIYDikRYolHJCi37eJL85-K-Dy8sIWVAOlRaUQaK0S7Wc88PF28feUklsqKU89rl3NQhMJoCpBFJTTsETGKe3dTLxmzqkL9wwDtOspDfObQ8PcnDptCJ6pL'\n\n  handleLogin() {\n    if (this.state.token !== \"\") {\n      this.setState({ loggedIn: true });\n      // check every second for the player.\n      this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n      // this.checkForPlayer()\n    }\n  }\n\n  checkForPlayer() {\n    const { token } = this.state;\n\n    if (window.Spotify) {\n           clearInterval(this.playerCheckInterval);\n\n      this.player = new window.Spotify.Player({\n        name: \"Shawna's New Spotify Player\",\n        getOAuthToken: cb => { cb(token); },\n      });\n\n       this.createEventHandlers();\n\n      // finally, connect!\n      this.player.connect();\n    }\n  }\n\n\n  createEventHandlers() {\n\n    this.player.on('initialization_error', e => { console.error(e); });\n    this.player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({ loggedIn: false });\n    });\n    this.player.on('account_error', e => { console.error(e); });\n    this.player.on('playback_error', e => { console.error(e); });\n\n    // Playback status updates\n    this.player.on('player_state_changed', state => this.onStateChanged(state));\n     this.player.on('player_state_changed', state => { console.log(state); });\n\n     this.player.on('ready', data => {\n       console.log(data)\n       let { device_id } = data;\n       console.log(\"Let the music play on!\");\n       this.setState({ deviceId: device_id });\n     });\n    // Ready\n    this.player.on('ready', async data => {\n      let { device_id } = data;\n      console.log(\"Let the music play on!\");\n      await this.setState({ deviceId: device_id });\n      this.transferPlaybackHere();\n      this.playRoomPlaylist();\n    });\n\n\n  }\n\n  transferPlaybackHere() {\n  const { deviceId, token } = this.state;\n  fetch(\"https://api.spotify.com/v1/me/player\", {\n    method: \"PUT\",\n    headers: {\n      authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      \"device_ids\": [ deviceId ],\n      \"play\": true,\n    }),\n  });\n}\n\nonStateChanged(state) {\n  // if we're no longer listening to music, we'll get a null state.\n  if (state !== null) {\n    const {\n      current_track: currentTrack,\n      position,\n      duration,\n    } = state.track_window;\n    const trackName = currentTrack.name;\n    const albumName = currentTrack.album.name;\n    const artistName = currentTrack.artists\n      .map(artist => artist.name)\n      .join(\", \");\n    const playing = !state.paused;\n    this.setState({\n      position,\n      duration,\n      trackName,\n      albumName,\n      artistName,\n      playing\n    });\n  }\n}\n\nplayRoomPlaylist() {\n  console.log(\"playlist pressed\")\n  console.log(\"appState\", this.props.appState)\n  const { deviceId, token, uris } = this.state;\n\n  fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {\n    method: \"PUT\",\n    headers: {\n      authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      \"uris\": this.props.appstate.playlistSongs.map((uriobject)=>{\n        return uriobject.spotify_url})\n    })\n  })\n  .then(result => result.json())\n  .then((tracks) =>{\n\n    console.log(tracks)\n  })\n\n}\n\n\n\n  render() {\n\n    const {\n      token,\n      loggedIn,\n      artistName,\n      trackName,\n      albumName,\n      error,\n      position,\n      duration,\n      playing,\n    } = this.state;\n\n  return (\n        <div>\n              <p>Artist: {artistName}</p>\n              <p>Track: {trackName}</p>\n              <p>Album: {albumName}</p>\n        </div>\n\n\n      );\n  }//end of render\n}//component end\n\nexport default WebPlayer;\n"]},"metadata":{},"sourceType":"module"}