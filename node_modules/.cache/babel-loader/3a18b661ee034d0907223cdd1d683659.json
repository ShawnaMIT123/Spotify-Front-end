{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Shawnie/Development/Spotify API Intro/frontend/src/components/WebPlayer2.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchAuthorization } from '../actions/AuthActions';\nimport { getRoomTracks } from '../actions/AuthActions';\nimport { getCurrentUsers } from '../actions/AuthActions';\nvar mainContainer = document.getElementById('js-main-container'),\n    background = document.getElementById('js-background');\n\nvar WebPlayer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WebPlayer, _Component);\n\n  function WebPlayer(props) {\n    var _this;\n\n    _classCallCheck(this, WebPlayer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebPlayer).call(this, props));\n\n    _this.playQueueSong = function () {\n      ///If playlist is empty\n      if (_this.props.appstate.playlistSongs.length == 0) {\n        console.log(\"Song List is Empty\");\n      } else {\n        console.log(\"playlist pressed\");\n        console.log(\"appState\", _this.props.appstate);\n        var _this$state = _this.state,\n            deviceId = _this$state.deviceId,\n            token = _this$state.token,\n            uris = _this$state.uris;\n        fetch(\"https://api.spotify.com/v1/me/player/play?device_id=\".concat(deviceId), {\n          method: \"PUT\",\n          headers: {\n            authorization: \"Bearer \".concat(token),\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            \"uris\": [_this.props.appstate.playlistSongs[0].spotify_url]\n          })\n        }).then(function (response) {\n          console.log('Success:', JSON.stringify(response));\n\n          _this.setState({\n            startTime: Date.now()\n          }, function () {\n            fetch(\"http://localhost:3000/api/v1/tracks/\".concat(_this.props.appstate.playlistSongs[0].id), {\n              method: 'PATCH',\n              // or 'PUT'\n              body: JSON.stringify({\n                start_time: _this.state.startTime\n              }),\n              // data can be `string` or {object}!\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            }).then(function (response) {\n              return console.log('Success:', JSON.stringify(response));\n            }).catch(function (error) {\n              return console.error('Error:', error);\n            });\n          });\n        }).catch(function (error) {\n          return console.error('Error:', error);\n        });\n      }\n    };\n\n    _this.state = {\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      paused: false,\n      position: 0,\n      duration: 0,\n      uris: [],\n      startTime: null,\n      counter: 0,\n      artistsCache: {},\n      artistFetching: false,\n      albumImage: null\n    };\n    _this.playerCheckInterval = null;\n    return _this;\n  }\n\n  _createClass(WebPlayer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // fetch(\"http://localhost:3000/api/v1/users/1\", {\n      //   method: 'GET', // or 'PUT'\n      //   headers:{\n      //     'Content-Type': 'application/json'\n      //   }\n      // }).then(res => res.json())\n      // .then(response => {\n      //   this.setState({token: response[\"access_token\"]\n      //      }, () => {\n      //\n      //     this.handleLogin()\n      //   })\n      // })\n      setTimeout(function () {\n        return _this2.handleLogin();\n      }, 4000);\n    }\n  }, {\n    key: \"handleLogin\",\n    value: function handleLogin() {\n      var _this3 = this;\n\n      if (this.state.token == \"\") {\n        this.setState({\n          loggedIn: true\n        }); // check every second for the player.\n\n        this.playerCheckInterval = setInterval(function () {\n          return _this3.checkForPlayer();\n        }, 1000); // this.checkForPlayer()\n        //*****write function to update state and user in the back end logged in*****\n      }\n    }\n  }, {\n    key: \"checkForPlayer\",\n    value: function checkForPlayer() {\n      var _this4 = this;\n\n      // let token  = this.props.user.user[\"access_token\"];\n      if (window.Spotify && this.props.user.user) {\n        clearInterval(this.playerCheckInterval);\n        this.setState({\n          token: this.props.user.user[\"access_token\"]\n        }, function () {\n          return _this4.createPlayer();\n        });\n      } // finally, connect!\n\n    }\n  }, {\n    key: \"createPlayer\",\n    value: function createPlayer() {\n      var _this5 = this;\n\n      var token = this.state.token;\n      this.player = new window.Spotify.Player({\n        name: \"Shawna's New Spotify Player\",\n        getOAuthToken: function getOAuthToken(cb) {\n          cb(_this5.props.user.user[\"access_token\"]);\n        }\n      });\n      this.player.connect();\n      console.log(\"player connected\");\n      this.createEventHandlers();\n      setInterval(function () {\n        _this5.props.getRoomTracks();\n      }, 1000);\n      setInterval(function () {\n        _this5.props.getCurrentUsers();\n      }, 1000);\n    }\n  }, {\n    key: \"createEventHandlers\",\n    value: function createEventHandlers() {\n      var _this6 = this;\n\n      this.player.on('initialization_error', function (e) {\n        console.error(e);\n      });\n      this.player.on('authentication_error', function (e) {\n        console.error(e);\n\n        _this6.setState({\n          loggedIn: false\n        });\n      });\n      this.player.on('account_error', function (e) {\n        console.error(e);\n      });\n      this.player.on('playback_error', function (e) {\n        console.error(e);\n      }); // Playback status updates\n\n      this.player.on('player_state_changed', function (state) {\n        return _this6.settingStateofNewSong(state);\n      }); //   this.player.on('player_state_changed', response=> response => {\n      //   var mainArtist = response.track_window.current_track.artists[0];\n      //   if (!(mainArtist.id in this.state.artistsCache) && !this.state.artistFetching) {\n      //     artistFetching = true;\n      //     this.player.fetchGeneric(mainArtist.href)\n      //       .then(function(artist) {\n      //         this.state.artistFetching = false;\n      //         return artist.json();\n      //       }).then(function(artist)Â {\n      //         if (artist.images.length) {\n      //           artistsCache[artist.id] = artist.images[0].url;\n      //         }\n      //       }).catch(function(e) {\n      //         artistFetching = false;\n      //       });\n      //   }\n      //   mainContainer.innerHTML = template(response);\n      // })\n      // Ready\n\n      this.player.on('ready',\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(data) {\n          var device_id;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  device_id = data.device_id;\n                  console.log(\"Let the music play on!\");\n                  _context.next = 4;\n                  return _this6.setState({\n                    deviceId: device_id\n                  });\n\n                case 4:\n                  _this6.transferPlaybackHere(); // setTimeout(() => this.playQueueSong(), 2000);\n\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"transferPlaybackHere\",\n    value: function transferPlaybackHere() {\n      var _this$state2 = this.state,\n          deviceId = _this$state2.deviceId,\n          token = _this$state2.token;\n      fetch(\"https://api.spotify.com/v1/me/player\", {\n        method: \"PUT\",\n        headers: {\n          authorization: \"Bearer \".concat(token),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          \"device_ids\": [deviceId],\n          \"play\": true\n        })\n      }).then(console.log(\"transferedPlaybackHere!\"));\n      this.getCurrentStateEverySecond();\n    }\n  }, {\n    key: \"settingStateofNewSong\",\n    value: function settingStateofNewSong(state) {\n      var _this7 = this;\n\n      // if we're no longer listening to music, we'll get a null state.\n      console.log(\"prior state\", state);\n      console.log(\"prior this.state\", this.state); ////first song to change to after playback transfer\n\n      if (this.state.counter == 0) {} else if (state !== null && state.position == 0 && state.paused == false && state.duration == this.state.duration || state !== null && state.position == 0 && state.playing == true || state !== null && state.position == 0 && this.state.duration == 0 || state !== null && state.position == 0 && state.paused == false && state.duration > 0) {\n        console.log(\"duration\", this.state.duration);\n        var currentTrack = state.track_window.current_track;\n        var position = state.position,\n            duration = state.duration;\n        var trackName = currentTrack.name;\n        var albumName = currentTrack.album.name;\n        var artistName = currentTrack.artists.map(function (artist) {\n          return artist.name;\n        }).join(\", \");\n        var paused = state.paused;\n        console.log(\"running settingStateofNewSongFirstSong\", state);\n        this.setState({\n          position: position,\n          duration: duration,\n          trackName: trackName,\n          albumName: albumName,\n          artistName: artistName,\n          paused: paused\n        }, function () {\n          console.log(\"settingStateofNewSong\", _this7.state);\n          setTimeout(function () {\n            return _this7.playQueueSong();\n          }, 3000 + duration); // setTimeout(() => this.deleteFinishedSong(), duration)\n        });\n      } ////paused state after playback transfer\n      else if (state !== null) {\n          var _currentTrack = state.track_window.current_track;\n          var _position = state.position,\n              _duration = state.duration;\n          var _trackName = _currentTrack.name;\n          var _albumName = _currentTrack.album.name;\n\n          var _artistName = _currentTrack.artists.map(function (artist) {\n            return artist.name;\n          }).join(\", \");\n\n          var _paused = state.paused;\n          this.setState({\n            position: _position,\n            duration: _duration,\n            trackName: _trackName,\n            albumName: _albumName,\n            artistName: _artistName,\n            paused: _paused\n          });\n          console.log(\"first playback\", this.state);\n        } //identify if this is the first state change\n\n\n      this.setState(function (currentState) {\n        return {\n          counter: currentState.counter + 1\n        };\n      });\n    }\n  }, {\n    key: \"playRoomPlaylist\",\n    // deleteFinishedSong = () => {\n    //   console.log(\"playlist pressed\")\n    //   console.log(\"appState\", this.props.appstate)\n    //   const { deviceId, token, uris} = this.state;\n    //\n    //\n    //\n    //   fetch(`http://localhost:3000/api/v1/tracks/${this.props.appstate.playlistSongs[0].id}`, {\n    //     method: 'DELETE'// or 'PUT'\n    //   })\n    //   .then(response => console.log('Success:', JSON.stringify(response)))\n    //   .catch(error => console.error('Error:', error));\n    //\n    // }\n    value: function playRoomPlaylist() {\n      console.log(\"playlist pressed\");\n      console.log(\"appState\", this.props.appstate);\n      var _this$state3 = this.state,\n          deviceId = _this$state3.deviceId,\n          token = _this$state3.token,\n          uris = _this$state3.uris;\n      fetch(\"https://api.spotify.com/v1/me/player/play?device_id=\".concat(deviceId), {\n        method: \"PUT\",\n        headers: {\n          authorization: \"Bearer \".concat(token),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          \"uris\": this.props.appstate.playlistSongs.map(function (uriobject) {\n            return uriobject.spotify_url;\n          })\n        })\n      }).then(function (result) {\n        return result.json();\n      }).then(function (tracks) {\n        console.log(tracks);\n      });\n    }\n  }, {\n    key: \"getCurrentPlayerState\",\n    value: function getCurrentPlayerState() {\n      var _this8 = this;\n\n      console.log(\"setting CurrentPlayStateIncrement\");\n      this.player.getCurrentState().then(function (state) {\n        if (!state) {\n          console.error('User is not playing music through the Web Playback SDK');\n          return;\n        } else {\n          var currentTrack = state.track_window.current_track;\n          var position = state.position,\n              duration = state.duration;\n          var trackName = currentTrack.name;\n          var albumName = currentTrack.album.name;\n          var artistName = currentTrack.artists.map(function (artist) {\n            return artist.name;\n          }).join(\", \");\n          var albumImage = currentTrack.album.images[0].url;\n          var paused = state.paused;\n\n          _this8.setState({\n            position: position,\n            duration: duration,\n            trackName: trackName,\n            albumName: albumName,\n            artistName: artistName,\n            paused: paused,\n            albumImage: albumImage\n          }); // console.log(this.state)\n\n        }\n      });\n    }\n  }, {\n    key: \"getCurrentStateEverySecond\",\n    value: function getCurrentStateEverySecond() {\n      var _this9 = this;\n\n      setInterval(function () {\n        return _this9.getCurrentPlayerState();\n      }, 1000);\n    } // var artistsCache = {},\n    //     artistFetching = false;\n    // spotifyPlayer.on('update', response => {\n    //   var mainArtist = response.item.artists[0];\n    //   if (!(mainArtist.id in artistsCache) && !artistFetching) {\n    //     artistFetching = true;\n    //     spotifyPlayer.fetchGeneric(mainArtist.href)\n    //       .then(function(artist) {\n    //         artistFetching = false;\n    //         return artist.json();\n    //       }).then(function(artist)Â {\n    //         if (artist.images.length) {\n    //           artistsCache[artist.id] = artist.images[0].url;\n    //         }\n    //       }).catch(function(e) {\n    //         artistFetching = false;\n    //       });\n    //   }\n    //   mainContainer.innerHTML = template(response);\n    // });\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state4 = this.state,\n          token = _this$state4.token,\n          loggedIn = _this$state4.loggedIn,\n          artistName = _this$state4.artistName,\n          trackName = _this$state4.trackName,\n          albumName = _this$state4.albumName,\n          error = _this$state4.error,\n          position = _this$state4.position,\n          duration = _this$state4.duration,\n          paused = _this$state4.paused,\n          albumImage = _this$state4.albumImage;\n      console.log(this.state);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"playerbackgroud\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"main-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"now-playing__img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: albumImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"now-playing__side\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"now-playing__name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }, trackName), React.createElement(\"div\", {\n        className: \"now-playing__artist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }, artistName), React.createElement(\"div\", {\n        class: \"now-playing__status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }, paused ? 'Paused' : 'Playing'), React.createElement(\"div\", {\n        className: \"progress\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"progress__bar\",\n        style: {\n          width: \"\".concat(position * 100 / duration, \"%\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419\n        },\n        __self: this\n      }))))));\n    } //end of render\n\n  }]);\n\n  return WebPlayer;\n}(Component); //component end\n// const mapDispatchToProps = {\n//     currentUser\n// }\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n};\n\nvar mapDispatchToProps = {\n  getRoomTracks: getRoomTracks,\n  getCurrentUsers: getCurrentUsers\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(WebPlayer);","map":{"version":3,"sources":["/Users/Shawnie/Development/Spotify API Intro/frontend/src/components/WebPlayer2.js"],"names":["React","Component","connect","fetchAuthorization","getRoomTracks","getCurrentUsers","mainContainer","document","getElementById","background","WebPlayer","props","playQueueSong","appstate","playlistSongs","length","console","log","state","deviceId","token","uris","fetch","method","headers","authorization","body","JSON","stringify","spotify_url","then","response","setState","startTime","Date","now","id","start_time","catch","error","loggedIn","trackName","artistName","albumName","paused","position","duration","counter","artistsCache","artistFetching","albumImage","playerCheckInterval","setTimeout","handleLogin","setInterval","checkForPlayer","window","Spotify","user","clearInterval","createPlayer","player","Player","name","getOAuthToken","cb","createEventHandlers","on","e","settingStateofNewSong","data","device_id","transferPlaybackHere","getCurrentStateEverySecond","playing","currentTrack","track_window","current_track","album","artists","map","artist","join","currentState","uriobject","result","json","tracks","getCurrentState","images","url","getCurrentPlayerState","width","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux'\nimport { fetchAuthorization } from '../actions/AuthActions'\nimport { getRoomTracks} from '../actions/AuthActions'\nimport { getCurrentUsers} from '../actions/AuthActions'\n\nvar mainContainer = document.getElementById('js-main-container'),\n    background = document.getElementById('js-background');\n\nclass WebPlayer extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      token:\"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      paused: false,\n      position: 0,\n      duration: 0,\n      uris: [],\n      startTime: null,\n      counter: 0,\n      artistsCache: {},\n      artistFetching: false,\n      albumImage: null\n    };\n\n    this.playerCheckInterval = null;\n  }\n\n  componentDidMount(){\n\n    // fetch(\"http://localhost:3000/api/v1/users/1\", {\n    //   method: 'GET', // or 'PUT'\n    //   headers:{\n    //     'Content-Type': 'application/json'\n    //   }\n    // }).then(res => res.json())\n    // .then(response => {\n    //   this.setState({token: response[\"access_token\"]\n    //      }, () => {\n    //\n    //     this.handleLogin()\n    //   })\n    // })\n        setTimeout(() => this.handleLogin(), 4000);\n  }\n\n  handleLogin() {\n\n    if (this.state.token == \"\") {\n      this.setState({ loggedIn: true });\n      // check every second for the player.\n      this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n      // this.checkForPlayer()\n      //*****write function to update state and user in the back end logged in*****\n    }\n  }\n\n  checkForPlayer() {\n     // let token  = this.props.user.user[\"access_token\"];\n\n    if (window.Spotify && this.props.user.user ) {\n\n           clearInterval(this.playerCheckInterval);\n           this.setState({token: this.props.user.user[\"access_token\"]}, ()=> this.createPlayer())\n\n      }\n\n      // finally, connect!\n  }\n\n\ncreatePlayer() {\n  const { token } = this.state;\n\n  this.player = new window.Spotify.Player({\n    name: \"Shawna's New Spotify Player\",\n    getOAuthToken: cb => { cb(this.props.user.user[\"access_token\"]); },\n  });\n  this.player.connect();\n  console.log(\"player connected\")\n   this.createEventHandlers();\n\n   setInterval(()=>{this.props.getRoomTracks()}, 1000);\n   setInterval(()=>{this.props.getCurrentUsers()}, 1000);\n}\n\n  createEventHandlers() {\n    this.player.on('initialization_error', e => { console.error(e); });\n    this.player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({ loggedIn: false });\n    });\n    this.player.on('account_error', e => { console.error(e); });\n    this.player.on('playback_error', e => { console.error(e); });\n\n    // Playback status updates\n    this.player.on('player_state_changed', state => this.settingStateofNewSong(state));\n//   this.player.on('player_state_changed', response=> response => {\n//   var mainArtist = response.track_window.current_track.artists[0];\n//   if (!(mainArtist.id in this.state.artistsCache) && !this.state.artistFetching) {\n//     artistFetching = true;\n//     this.player.fetchGeneric(mainArtist.href)\n//       .then(function(artist) {\n//         this.state.artistFetching = false;\n//         return artist.json();\n//       }).then(function(artist)Â {\n//         if (artist.images.length) {\n//           artistsCache[artist.id] = artist.images[0].url;\n//         }\n//       }).catch(function(e) {\n//         artistFetching = false;\n//       });\n//   }\n//   mainContainer.innerHTML = template(response);\n// })\n\n\n\n    // Ready\n    this.player.on('ready', async data => {\n      let { device_id } = data;\n      console.log(\"Let the music play on!\");\n      await this.setState({ deviceId: device_id });\n      this.transferPlaybackHere();\n      // setTimeout(() => this.playQueueSong(), 2000);\n    });\n\n  }\n\n\n\n  transferPlaybackHere() {\n  const { deviceId, token } = this.state;\n  fetch(\"https://api.spotify.com/v1/me/player\", {\n    method: \"PUT\",\n    headers: {\n      authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      \"device_ids\": [ deviceId ],\n      \"play\": true,\n    }),\n  }).then(console.log(\"transferedPlaybackHere!\"))\n  this.getCurrentStateEverySecond();\n}\n\n\nsettingStateofNewSong(state) {\n  // if we're no longer listening to music, we'll get a null state.\nconsole.log(\"prior state\" , state)\nconsole.log(\"prior this.state\" , this.state)\n\n////first song to change to after playback transfer\nif(this.state.counter == 0 ){\n\n\n} else if ((state !== null && state.position == 0 && state.paused == false && state.duration == this.state.duration) || (state !== null && state.position == 0 && state.playing == true) || (state !== null && state.position == 0 && this.state.duration == 0) || (state !== null && state.position == 0 && state.paused == false  && state.duration > 0 )){\n  console.log(\"duration\", this.state.duration)\n\n  let {\n        current_track: currentTrack,\n      } = state.track_window;\n    let {\n            position,\n            duration,\n          } = state;\n\n  const trackName = currentTrack.name;\n  const albumName = currentTrack.album.name;\n  const artistName = currentTrack.artists\n    .map(artist => artist.name)\n    .join(\", \");\n  const paused = state.paused;\n\n  console.log(\"running settingStateofNewSongFirstSong\", state)\n  this.setState({\n    position,\n    duration,\n    trackName,\n    albumName,\n    artistName,\n    paused\n\n  }, ()=>{\n    console.log(\"settingStateofNewSong\", this.state)\n\n        setTimeout(() => this.playQueueSong(), 3000 + duration)\n        // setTimeout(() => this.deleteFinishedSong(), duration)\n  });\n\n}\n////paused state after playback transfer\nelse if (state !== null) {\n    let {\n          current_track: currentTrack,\n        } = state.track_window;\n      let {\n              position,\n              duration,\n            } = state;\n\n    const trackName = currentTrack.name;\n    const albumName = currentTrack.album.name;\n    const artistName = currentTrack.artists\n      .map(artist => artist.name)\n      .join(\", \");\n    const paused = state.paused;\n    this.setState({\n      position,\n      duration,\n      trackName,\n      albumName,\n      artistName,\n      paused\n\n    });\n    console.log(\"first playback\", this.state)\n  }\n  //identify if this is the first state change\n  this.setState(currentState => {\n    return {counter: currentState.counter + 1 };\n  });\n\n}\n\nplayQueueSong = () => {\n///If playlist is empty\n  if(this.props.appstate.playlistSongs.length == 0){\n    console.log(\"Song List is Empty\")\n  }else {\n\n\n  console.log(\"playlist pressed\")\n  console.log(\"appState\", this.props.appstate)\n  const { deviceId, token, uris} = this.state;\n\n  fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {\n    method: \"PUT\",\n    headers: {\n      authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n\n      \"uris\": [this.props.appstate.playlistSongs[0].spotify_url]\n    })\n  })\n  .then(response => {\n    console.log('Success:', JSON.stringify(response))\n    this.setState({startTime: Date.now()}, ()=>{\n      fetch(`http://localhost:3000/api/v1/tracks/${this.props.appstate.playlistSongs[0].id}`, {\n        method: 'PATCH', // or 'PUT'\n        body: JSON.stringify({start_time : this.state.startTime}) , // data can be `string` or {object}!\n        headers:{\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(response => console.log('Success:', JSON.stringify(response)))\n      .catch(error => console.error('Error:', error));\n    });\n    })\n  .catch(error => console.error('Error:', error));\n  }\n}\n\n// deleteFinishedSong = () => {\n//   console.log(\"playlist pressed\")\n//   console.log(\"appState\", this.props.appstate)\n//   const { deviceId, token, uris} = this.state;\n//\n//\n//\n//   fetch(`http://localhost:3000/api/v1/tracks/${this.props.appstate.playlistSongs[0].id}`, {\n//     method: 'DELETE'// or 'PUT'\n//   })\n//   .then(response => console.log('Success:', JSON.stringify(response)))\n//   .catch(error => console.error('Error:', error));\n//\n// }\n\nplayRoomPlaylist() {\n  console.log(\"playlist pressed\")\n  console.log(\"appState\", this.props.appstate)\n  const { deviceId, token, uris } = this.state;\n\n\n  fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {\n    method: \"PUT\",\n    headers: {\n      authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      \"uris\": this.props.appstate.playlistSongs.map((uriobject)=>{\n        return uriobject.spotify_url})\n    })\n  })\n  .then(result => result.json())\n  .then((tracks) =>{\n\n    console.log(tracks)\n  })\n\n}\n\ngetCurrentPlayerState(){\n  console.log(\"setting CurrentPlayStateIncrement\")\n  this.player.getCurrentState().then(state => {\n\n    if (!state) {\n      console.error('User is not playing music through the Web Playback SDK');\n      return;\n    } else {\n      let {\n            current_track: currentTrack,\n          } = state.track_window;\n        let {\n                position,\n                duration,\n              } = state;\n\n\n          const trackName = currentTrack.name;\n          const albumName = currentTrack.album.name;\n          const artistName = currentTrack.artists\n            .map(artist => artist.name)\n            .join(\", \");\n          const albumImage = currentTrack.album.images[0].url\n          const paused = state.paused;\n          this.setState({\n            position,\n            duration,\n            trackName,\n            albumName,\n            artistName,\n            paused,\n            albumImage\n\n          });\n           // console.log(this.state)\n        }\n    })\n}\n\ngetCurrentStateEverySecond() {\n\n    setInterval(() => this.getCurrentPlayerState(), 1000);\n\n}\n\n\n// var artistsCache = {},\n//     artistFetching = false;\n// spotifyPlayer.on('update', response => {\n//   var mainArtist = response.item.artists[0];\n//   if (!(mainArtist.id in artistsCache) && !artistFetching) {\n//     artistFetching = true;\n//     spotifyPlayer.fetchGeneric(mainArtist.href)\n//       .then(function(artist) {\n//         artistFetching = false;\n//         return artist.json();\n//       }).then(function(artist)Â {\n//         if (artist.images.length) {\n//           artistsCache[artist.id] = artist.images[0].url;\n//         }\n//       }).catch(function(e) {\n//         artistFetching = false;\n//       });\n//   }\n//   mainContainer.innerHTML = template(response);\n// });\n\n\n\n\n\n\n  render() {\n\n    const {\n      token,\n      loggedIn,\n      artistName,\n      trackName,\n      albumName,\n      error,\n      position,\n      duration,\n      paused,\n      albumImage\n    } = this.state;\n\n\n\n\n\n\nconsole.log(this.state)\n  return (\n    <div>\n      <div className=\"playerbackgroud\">\n    <div className=\"main-wrapper\">\n      <div className=\"now-playing__img\">\n        <img src={albumImage}></img>\n      </div>\n        <div className=\"now-playing__side\">\n          <div className=\"now-playing__name\">{trackName}</div>\n          <div className=\"now-playing__artist\">{artistName}</div>\n            <div class=\"now-playing__status\">{paused ? 'Paused' : 'Playing'}</div>\n          <div className=\"progress\">\n            <div className=\"progress__bar\" style={{width: `${position * 100 / duration}%` }}></div>\n          </div>\n        </div>\n\n      </div>\n\n        </div>\n      </div>\n\n\n\n\n      );\n  }//end of render\n}//component end\n\n// const mapDispatchToProps = {\n//     currentUser\n// }\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user\n  }\n}\n\nconst mapDispatchToProps = {\n    getRoomTracks,\n    getCurrentUsers\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WebPlayer)\n"]},"metadata":{},"sourceType":"module"}