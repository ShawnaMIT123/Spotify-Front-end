{"ast":null,"code":"import _objectSpread from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { UPDATE_AUTHORIZATION, LOGOUT_USER, UPDATE_ROOM_PLAYLIST, UPDATE_CURRENT_USERS } from './actions/types';\nvar defaultState = {\n  isLoading: false,\n  results: [],\n  value: '',\n  isLoggedIn: false,\n  user: {\n    spotify_url: null,\n    display_name: null,\n    uri: null,\n    access_token: null,\n    profile_image: null,\n    username: null,\n    user_id: null\n  },\n  error: false,\n  loggedInUsers: [],\n  selectedSong: {},\n  playlist: [],\n  users: []\n};\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(action);\n\n  switch (action.type) {\n    case \"UPDATE_TRACK_RESULTS\":\n      return _objectSpread({}, state, {\n        results: action.payload\n      });\n\n    case UPDATE_AUTHORIZATION:\n      return Object.assign({}, state, {\n        user: action.payload.user,\n        isLoggedIn: true\n      });\n\n    case LOGOUT_USER:\n      localStorage.removeItem('jwt');\n      return Object.assign({}, state, {\n        isLoggedIn: false,\n        user: {\n          spotify_url: null,\n          display_name: null,\n          uri: null,\n          access_token: null,\n          profile_image: null,\n          username: null,\n          user_id: null\n        }\n      });\n\n    case UPDATE_ROOM_PLAYLIST:\n      return Object.assign({}, state, {\n        playlist: action.payload.playlist\n      });\n\n    case UPDATE_CURRENT_USERS:\n      return Object.assign({}, state, {\n        users: action.payload.users\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/Users/Shawnie/Development/Spotify API Intro/frontend/src/reducer.js"],"names":["UPDATE_AUTHORIZATION","LOGOUT_USER","UPDATE_ROOM_PLAYLIST","UPDATE_CURRENT_USERS","defaultState","isLoading","results","value","isLoggedIn","user","spotify_url","display_name","uri","access_token","profile_image","username","user_id","error","loggedInUsers","selectedSong","playlist","users","reducer","state","action","console","log","type","payload","Object","assign","localStorage","removeItem"],"mappings":";AAAA,SACEA,oBADF,EAEEC,WAFF,EAGEC,oBAHF,EAIEC,oBAJF,QAKO,iBALP;AAOA,IAAMC,YAAY,GAAI;AACpBC,EAAAA,SAAS,EAAE,KADS;AAEpBC,EAAAA,OAAO,EAAE,EAFW;AAGpBC,EAAAA,KAAK,EAAE,EAHa;AAIpBC,EAAAA,UAAU,EAAE,KAJQ;AAKpBC,EAAAA,IAAI,EAAE;AAACC,IAAAA,WAAW,EAAE,IAAd;AAAoBC,IAAAA,YAAY,EAAE,IAAlC;AAAwCC,IAAAA,GAAG,EAAE,IAA7C;AAAmDC,IAAAA,YAAY,EAAE,IAAjE;AAAuEC,IAAAA,aAAa,EAAE,IAAtF;AAA4FC,IAAAA,QAAQ,EAAE,IAAtG;AAA4GC,IAAAA,OAAO,EAAE;AAArH,GALc;AAMpBC,EAAAA,KAAK,EAAE,KANa;AAOpBC,EAAAA,aAAa,EAAC,EAPM;AAQpBC,EAAAA,YAAY,EAAC,EARO;AASpBC,EAAAA,QAAQ,EAAE,EATU;AAUpBC,EAAAA,KAAK,EAAC;AAVc,CAAtB;;AAeA,SAASC,OAAT,GAA4C;AAAA,MAA3BC,KAA2B,uEAArBnB,YAAqB;AAAA,MAAPoB,MAAO;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAQA,MAAM,CAACG,IAAf;AACE,SAAK,sBAAL;AACI,+BAAWJ,KAAX;AAAkBjB,QAAAA,OAAO,EAAEkB,MAAM,CAACI;AAAlC;;AACF,SAAM5B,oBAAN;AACM,aAAO6B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyB;AAACd,QAAAA,IAAI,EAAEe,MAAM,CAACI,OAAP,CAAenB,IAAtB;AAA4BD,QAAAA,UAAU,EAAE;AAAxC,OAAzB,CAAP;;AACN,SAAMP,WAAN;AACM8B,MAAAA,YAAY,CAACC,UAAb,CAAwB,KAAxB;AACA,aAAOH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyB;AAC9Bf,QAAAA,UAAU,EAAE,KADkB;AAE9BC,QAAAA,IAAI,EAAE;AAACC,UAAAA,WAAW,EAAE,IAAd;AAAoBC,UAAAA,YAAY,EAAE,IAAlC;AAAwCC,UAAAA,GAAG,EAAE,IAA7C;AAAmDC,UAAAA,YAAY,EAAE,IAAjE;AAAuEC,UAAAA,aAAa,EAAE,IAAtF;AAA4FC,UAAAA,QAAQ,EAAE,IAAtG;AAA4GC,UAAAA,OAAO,EAAE;AAArH;AAFwB,OAAzB,CAAP;;AAIJ,SAAMd,oBAAN;AACY,aAAO2B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyB;AAACH,QAAAA,QAAQ,EAAEI,MAAM,CAACI,OAAP,CAAeR;AAA1B,OAAzB,CAAP;;AACd,SAAMjB,oBAAN;AACc,aAAO0B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyB;AAACF,QAAAA,KAAK,EAAEG,MAAM,CAACI,OAAP,CAAeP;AAAvB,OAAzB,CAAP;;AAEhB;AACE,aAAOE,KAAP;AAjBJ;AAmBD;;AAED,eAAeD,OAAf","sourcesContent":["import {\n  UPDATE_AUTHORIZATION,\n  LOGOUT_USER,\n  UPDATE_ROOM_PLAYLIST,\n  UPDATE_CURRENT_USERS\n} from './actions/types'\n\nconst defaultState =  {\n  isLoading: false,\n  results: [],\n  value: '',\n  isLoggedIn: false,\n  user: {spotify_url: null, display_name: null, uri: null, access_token: null, profile_image: null, username: null, user_id: null},\n  error: false,\n  loggedInUsers:[],\n  selectedSong:{},\n  playlist: [],\n  users:[]\n\n}\n\n\nfunction reducer(state=defaultState, action){\n  console.log(action)\n  switch (action.type) {\n    case \"UPDATE_TRACK_RESULTS\":\n        return {...state, results: action.payload}\n      case (UPDATE_AUTHORIZATION):\n            return Object.assign({}, state, {user: action.payload.user, isLoggedIn: true})\n      case (LOGOUT_USER):\n            localStorage.removeItem('jwt')\n            return Object.assign({}, state, {\n              isLoggedIn: false,\n              user: {spotify_url: null, display_name: null, uri: null, access_token: null, profile_image: null, username: null, user_id: null}\n            })\n        case (UPDATE_ROOM_PLAYLIST):\n                    return Object.assign({}, state, {playlist: action.payload.playlist})\n      case (UPDATE_CURRENT_USERS):\n                    return Object.assign({}, state, {users: action.payload.users})\n\n    default:\n      return state\n  }\n}\n\nexport default reducer\n"]},"metadata":{},"sourceType":"module"}