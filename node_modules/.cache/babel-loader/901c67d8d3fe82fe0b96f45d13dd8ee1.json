{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Shawnie/Development/Spotify API Intro/frontend/src/components/Player.js\";\nimport React, { Component } from 'react';\n\nvar Player =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Player, _Component);\n\n  function Player(props) {\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Player).call(this, props));\n\n    _this.handleLogin = function () {\n      if (_this.state.token !== \"\") {\n        _this.setState({\n          loggedIn: true\n        }); // check every second for the player.\n\n\n        _this.playerCheckInterval = setInterval(function () {\n          return _this.checkForPlayer();\n        }, 1000);\n      }\n    };\n\n    _this.state = {\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0,\n      uris: []\n    };\n    _this.playerCheckInterval = null;\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"http://localhost:3000/api/v1/users/1\", {\n        method: 'GET',\n        // or 'PUT'\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (response) {\n        _this2.setState({\n          token: response[\"access_token\"]\n        }, function () {\n          _this2.handleLogin();\n        });\n      });\n    }\n  }, {\n    key: \"checkForPlayer\",\n    value: function checkForPlayer() {\n      var token = this.state.token;\n\n      if (window.Spotify !== null) {\n        clearInterval(this.playerCheckInterval);\n        this.player = new window.Spotify.Player({\n          name: \"Shawna's Spotify 2 Player\",\n          getOAuthToken: function getOAuthToken(cb) {\n            cb(token);\n          }\n        });\n        this.createEventHandlers(); // finally, connect!\n\n        this.player.connect();\n      }\n    }\n  }, {\n    key: \"createEventHandlers\",\n    value: function createEventHandlers() {\n      var _this3 = this;\n\n      this.player.on('initialization_error', function (e) {\n        console.error(e);\n      });\n      this.player.on('authentication_error', function (e) {\n        console.error(e);\n\n        _this3.setState({\n          loggedIn: false\n        });\n      });\n      this.player.on('account_error', function (e) {\n        console.error(e);\n      });\n      this.player.on('playback_error', function (e) {\n        console.error(e);\n      }); // Playback status updates\n      // this.player.on('player_state_changed', state => this.onStateChanged(state));\n\n      this.player.on('player_state_changed', function (state) {\n        console.log(state);\n      }); // Ready\n\n      this.player.on('ready',\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(data) {\n          var device_id;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  device_id = data.device_id;\n                  console.log(\"Let the music play on!\");\n                  _context.next = 4;\n                  return _this3.setState({\n                    deviceId: device_id\n                  });\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"transferPlaybackHere\",\n    value: function transferPlaybackHere() {\n      var _this$state = this.state,\n          deviceId = _this$state.deviceId,\n          token = _this$state.token;\n      fetch(\"https://api.spotify.com/v1/me/player\", {\n        method: \"PUT\",\n        headers: {\n          authorization: \"Bearer \".concat(token),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          \"device_ids\": [deviceId],\n          \"play\": true\n        })\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          token = _this$state2.token,\n          loggedIn = _this$state2.loggedIn,\n          artistName = _this$state2.artistName,\n          trackName = _this$state2.trackName,\n          albumName = _this$state2.albumName,\n          error = _this$state2.error,\n          position = _this$state2.position,\n          duration = _this$state2.duration,\n          playing = _this$state2.playing;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Artist: \", artistName), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Track: \", trackName), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Album: \", albumName));\n    } //end of render\n\n  }]);\n\n  return Player;\n}(Component); //component end\n\n\nexport default Player;","map":{"version":3,"sources":["/Users/Shawnie/Development/Spotify API Intro/frontend/src/components/Player.js"],"names":["React","Component","Player","props","handleLogin","state","token","setState","loggedIn","playerCheckInterval","setInterval","checkForPlayer","deviceId","error","trackName","artistName","albumName","playing","position","duration","uris","fetch","method","headers","then","res","json","response","window","Spotify","clearInterval","player","name","getOAuthToken","cb","createEventHandlers","connect","on","e","console","log","data","device_id","authorization","body","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Player extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0,\n      uris: []\n    };\n\n    this.playerCheckInterval = null;\n\n  }\n  componentDidMount(){\n\n    fetch(\"http://localhost:3000/api/v1/users/1\", {\n      method: 'GET', // or 'PUT'\n      headers:{\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json())\n    .then(response => {\n      this.setState({token: response[\"access_token\"]}, () => {\n        this.handleLogin()\n      })\n    })\n  }\n\n\n\n\n  handleLogin = () => {\n    if (this.state.token !== \"\") {\n      this.setState({ loggedIn: true });\n      // check every second for the player.\n      this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n    }\n  }\n\n\n  checkForPlayer() {\n    const { token } = this.state;\n\n    if (window.Spotify !== null) {\n       clearInterval(this.playerCheckInterval);\n\n\n      this.player = new window.Spotify.Player({\n        name: \"Shawna's Spotify 2 Player\",\n        getOAuthToken: cb => { cb(token); },\n      });\n       this.createEventHandlers();\n\n      // finally, connect!\n      this.player.connect();\n    }\n  }\n\n  createEventHandlers() {\n    this.player.on('initialization_error', e => { console.error(e); });\n    this.player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({ loggedIn: false });\n    });\n    this.player.on('account_error', e => { console.error(e); });\n    this.player.on('playback_error', e => { console.error(e); });\n\n    // Playback status updates\n    // this.player.on('player_state_changed', state => this.onStateChanged(state));\n     this.player.on('player_state_changed', state => { console.log(state); });\n\n    // Ready\n    this.player.on('ready', async data => {\n      let { device_id } = data;\n      console.log(\"Let the music play on!\");\n      await this.setState({ deviceId: device_id });\n      // this.transferPlaybackHere();\n    });\n\n\n  }\n\n  transferPlaybackHere() {\n  const { deviceId, token } = this.state;\n  fetch(\"https://api.spotify.com/v1/me/player\", {\n    method: \"PUT\",\n    headers: {\n      authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      \"device_ids\": [ deviceId ],\n      \"play\": true,\n    }),\n  });\n}\n\n  render() {\n    const {\n      token,\n      loggedIn,\n      artistName,\n      trackName,\n      albumName,\n      error,\n      position,\n      duration,\n      playing,\n    } = this.state;\n\n  return (\n        <div>\n              <p>Artist: {artistName}</p>\n              <p>Track: {trackName}</p>\n              <p>Album: {albumName}</p>\n\n        </div>\n\n\n      );\n  }//end of render\n}//component end\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}