{"ast":null,"code":"import _classCallCheck from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Shawnie/Development/Spotify API Intro/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { headers } from './auth/AuthHeaders';\nimport './App.css';\nimport { Button } from 'semantic-ui-react';\nimport { Route } from 'react-router-dom';\nimport SearchBar from './components/SearchBar';\nimport BrowseBar from './components/BrowseBar';\nimport LoginPage from './components/LoginPage';\nimport Room from './containers/Room';\nimport { connect } from 'react-redux';\n\nvar button = function button() {\n  return React.createElement(Button, {\n    as: \"a\",\n    href: \"http://localhost:3000/api/v1/login\",\n    color: \"grey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \" Login \");\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      browseResults: [],\n      playlistSongs: [],\n      userID: null // componentDidMount(){\n      //\n      //   setInterval(this.getData, 1000);\n      // }\n      // getData = () => {\n      //   fetch(\"http://localhost:3000/api/v1/rooms\", {\n      //     method: 'GET', // or 'PUT'\n      //     headers:{\n      //       'Content-Type': 'application/json'\n      //     }\n      //   }).then(res => res.json())\n      //   .then(response => {\n      //     this.setState({playlistSongs: response[0][\"tracks\"]})\n      //   }\n      // )\n      //   .catch(error => console.error('Error:', error))\n      // }\n      //\n      //   onSearchSubmit = (term) => {\n      //     fetch(\"http://localhost:3000/api/v1/users/addPlaylist\", {\n      //       method: 'POST', // or 'PUT'\n      //       body: JSON.stringify(term), // data can be `string` or {object}!\n      //       headers:{\n      //         'Content-Type': 'application/json'\n      //       }\n      //     }).then(res => res.json())\n      //     .then(response => console.log('Success:', JSON.stringify(response)))\n      //     .catch(error => console.error('Error:', error));\n      //       // const response = await axios.get('http://localhost:3000/api/v1/users/addSong',{\n      //       //   params: { query: term},\n      //       //   headers: {\n      //       //     Authorization: 'Client-ID 81fc93b8332e81b7fcc8a512b5d5fd2e7b168b6c123396f4367ab2f03bbc03f6'\n      //       //   }\n      //       //\n      //       // })\n      //       // this.setState({images: response.data.results })\n      //     }\n      // ///search spotify api for aritst and returning tracks to state which will then be used as brower bar results\n\n    };\n\n    _this.onBrowseChange = function (term) {\n      fetch(\"http://localhost:3000/api/v1/users/browserBar\", {\n        method: 'POST',\n        // or 'PUT'\n        body: JSON.stringify(term),\n        // data can be `string` or {object}!\n        headers: headers()\n      }).then(function (res) {\n        return res.json();\n      }).then(function (response) {\n        debugger;\n        console.log('Success:', JSON.stringify(response));\n        var resultsJSON = response[\"tracks\"].items.map(function (track) {\n          return {\n            \"title\": track.name,\n            \"image\": track.album.images[0].url,\n            \"artist\": track.artists.map(function (artist) {\n              return artist.name;\n            }).join(\", \"),\n            \"uri\": track.uri,\n            \"album\": track.album.name\n          };\n        });\n        console.log(resultsJSON);\n\n        _this.setState({\n          browseResults: resultsJSON\n        });\n\n        _this.props.setSearchResults(resultsJSON);\n      }).catch(function (error) {\n        return console.error('Error:', error);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // console.log(\"props\", this.props)\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/login\",\n        component: LoginPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/success\",\n        render: function render(props) {\n          return React.createElement(Room, Object.assign({}, props, {\n            state: _this2.state,\n            onBrowseChange: _this2.onBrowseChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setSearchResults: function setSearchResults(updated_tracks) {\n      dispatch({\n        type: \"UPDATE_TRACK_RESULTS\",\n        payload: updated_tracks\n      });\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/Shawnie/Development/Spotify API Intro/frontend/src/App.js"],"names":["React","Component","ReactDOM","headers","Button","Route","SearchBar","BrowseBar","LoginPage","Room","connect","button","App","state","browseResults","playlistSongs","userID","onBrowseChange","term","fetch","method","body","JSON","stringify","then","res","json","response","console","log","resultsJSON","items","map","track","name","album","images","url","artists","artist","join","uri","setState","props","setSearchResults","catch","error","mapDispatchToProps","dispatch","updated_tracks","type","payload"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { headers }  from './auth/AuthHeaders'\nimport './App.css';\nimport { Button } from 'semantic-ui-react'\nimport { Route } from 'react-router-dom';\nimport SearchBar from './components/SearchBar'\nimport BrowseBar from './components/BrowseBar'\nimport LoginPage from './components/LoginPage'\nimport Room from './containers/Room'\nimport {connect} from 'react-redux'\n\nconst button = () => {return <Button as=\"a\" href=\"http://localhost:3000/api/v1/login\"  color='grey'> Login </Button>}\n\n\nclass App extends Component {\n\n state = {browseResults: [],\n   playlistSongs: [],\n   userID: null\n }\n\n // componentDidMount(){\n //\n //   setInterval(this.getData, 1000);\n // }\n\n // getData = () => {\n //   fetch(\"http://localhost:3000/api/v1/rooms\", {\n //     method: 'GET', // or 'PUT'\n //     headers:{\n //       'Content-Type': 'application/json'\n //     }\n //   }).then(res => res.json())\n //   .then(response => {\n //     this.setState({playlistSongs: response[0][\"tracks\"]})\n //   }\n // )\n //   .catch(error => console.error('Error:', error))\n // }\n//\n//   onSearchSubmit = (term) => {\n//     fetch(\"http://localhost:3000/api/v1/users/addPlaylist\", {\n//       method: 'POST', // or 'PUT'\n//       body: JSON.stringify(term), // data can be `string` or {object}!\n//       headers:{\n//         'Content-Type': 'application/json'\n//       }\n//     }).then(res => res.json())\n//     .then(response => console.log('Success:', JSON.stringify(response)))\n//     .catch(error => console.error('Error:', error));\n//       // const response = await axios.get('http://localhost:3000/api/v1/users/addSong',{\n//       //   params: { query: term},\n//       //   headers: {\n//       //     Authorization: 'Client-ID 81fc93b8332e81b7fcc8a512b5d5fd2e7b168b6c123396f4367ab2f03bbc03f6'\n//       //   }\n//       //\n//       // })\n//       // this.setState({images: response.data.results })\n//     }\n// ///search spotify api for aritst and returning tracks to state which will then be used as brower bar results\n    onBrowseChange = (term) => {\n      fetch(\"http://localhost:3000/api/v1/users/browserBar\", {\n        method: 'POST', // or 'PUT'\n        body: JSON.stringify(term), // data can be `string` or {object}!\n        headers: headers()\n      }).then(res => res.json())\n      .then(response => {\n        debugger\n\n        console.log('Success:', JSON.stringify(response))\n        let resultsJSON = response[\"tracks\"].items.map((track)=>{\n          return {\"title\": track.name,\n          \"image\": track.album.images[0].url,\n        \"artist\": track.artists.map(artist => artist.name).join(\", \"),\n        \"uri\": track.uri,\n      \"album\": track.album.name\n    }\n        })\n        console.log(resultsJSON)\n\n        this.setState({browseResults: resultsJSON})\n        this.props.setSearchResults(resultsJSON)\n\n    })\n      .catch(error => console.error('Error:', error));\n    }\n\n\n\n\n  render() {\n    // console.log(\"props\", this.props)\n    return (\n      <div className=\"App\">\n        <Route path=\"/login\" component={LoginPage} />\n\n        <Route path=\"/success\" render={(props) => <Room {...props} state={this.state} onBrowseChange={this.onBrowseChange} />}\n          />\n\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n  return {\n    setSearchResults: (updated_tracks) => {\n      dispatch({\n        type: \"UPDATE_TRACK_RESULTS\",\n        payload: updated_tracks\n      })\n    }\n  }\n}\n\n\nexport default connect(null, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}