{"ast":null,"code":"import _classCallCheck from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Shawnie/Development/Spotify API Intro/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Shawnie/Development/Spotify API Intro/frontend/src/components/Player.js\";\nimport React, { Component } from 'react';\n\nvar Player =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Player, _Component);\n\n  function Player(props) {\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Player).call(this, props));\n\n    _this.getData = function () {\n      fetch(\"http://localhost:3000/api/v1/users/1\", {\n        method: 'GET',\n        // or 'PUT'\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (response) {\n        _this.setState({\n          token: response[\"access_token\"]\n        });\n      }).catch(function (error) {\n        return console.error('Error:', error);\n      });\n    };\n\n    _this.state = {\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0,\n      uris: []\n    };\n    _this.playerCheckInterval = null;\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"http://localhost:3000/api/v1/users/1\", {\n        method: 'GET',\n        // or 'PUT'\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (response) {\n        _this2.setState({\n          token: response[\"access_token\"]\n        });\n      });\n    }\n  }, {\n    key: \"handleLogin\",\n    value: function handleLogin() {\n      var _this3 = this;\n\n      if (this.state.token !== \"\") {\n        this.setState({\n          loggedIn: true\n        }); // check every second for the player.\n\n        this.playerCheckInterval = setInterval(function () {\n          return _this3.checkForPlayer();\n        }, 1000);\n      }\n    }\n  }, {\n    key: \"checkForPlayer\",\n    value: function checkForPlayer() {\n      var token = this.state.token;\n\n      if (window.Spotify !== null) {\n        clearInterval(this.playerCheckInterval);\n        this.player = new window.Spotify.Player({\n          name: \"Shawna's Spotify Player\",\n          getOAuthToken: function getOAuthToken(cb) {\n            cb(token);\n          }\n        });\n        this.createEventHandlers(); // finally, connect!\n\n        this.player.connect();\n      }\n    }\n  }, {\n    key: \"createEventHandlers\",\n    value: function createEventHandlers() {\n      var _this4 = this;\n\n      this.player.on('initialization_error', function (e) {\n        console.error(e);\n      });\n      this.player.on('authentication_error', function (e) {\n        console.error(e);\n\n        _this4.setState({\n          loggedIn: false\n        });\n      });\n      this.player.on('account_error', function (e) {\n        console.error(e);\n      });\n      this.player.on('playback_error', function (e) {\n        console.error(e);\n      }); // Playback status updates\n\n      this.player.on('player_state_changed', function (state) {\n        return _this4.onStateChanged(state);\n      });\n      this.player.on('player_state_changed', function (state) {\n        console.log(state);\n      }); // Ready\n\n      this.player.on('ready', function (data) {\n        console.log(data);\n        var device_id = data.device_id;\n        console.log(\"Let the music play on!\");\n\n        _this4.setState({\n          deviceId: device_id\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          token = _this$state.token,\n          loggedIn = _this$state.loggedIn,\n          artistName = _this$state.artistName,\n          trackName = _this$state.trackName,\n          albumName = _this$state.albumName,\n          error = _this$state.error,\n          position = _this$state.position,\n          duration = _this$state.duration,\n          playing = _this$state.playing;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Artist: \", artistName), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Track: \", trackName), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Album: \", albumName));\n    } //end of render\n\n  }]);\n\n  return Player;\n}(Component); //component end\n\n\nexport default Player;","map":{"version":3,"sources":["/Users/Shawnie/Development/Spotify API Intro/frontend/src/components/Player.js"],"names":["React","Component","Player","props","getData","fetch","method","headers","then","res","json","response","setState","token","catch","error","console","state","deviceId","loggedIn","trackName","artistName","albumName","playing","position","duration","uris","playerCheckInterval","setInterval","checkForPlayer","window","Spotify","clearInterval","player","name","getOAuthToken","cb","createEventHandlers","connect","on","e","onStateChanged","log","data","device_id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Player extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0,\n      uris: []\n    };\n\n    this.playerCheckInterval = null;\n\n  }\n  componentDidMount(){\n    fetch(\"http://localhost:3000/api/v1/users/1\", {\n      method: 'GET', // or 'PUT'\n      headers:{\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json())\n    .then(response => {\n      this.setState({token: response[\"access_token\"]})\n    }\n  )\n\n  }\n\n  getData = () => {\n    fetch(\"http://localhost:3000/api/v1/users/1\", {\n      method: 'GET', // or 'PUT'\n      headers:{\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json())\n    .then(response => {\n      this.setState({token: response[\"access_token\"]})\n    }\n  )\n    .catch(error => console.error('Error:', error))\n  }\n\n\n  handleLogin() {\n    if (this.state.token !== \"\") {\n      this.setState({ loggedIn: true });\n      // check every second for the player.\n      this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n    }\n  }\n\n\n  checkForPlayer() {\n    const { token } = this.state;\n\n    if (window.Spotify !== null) {\n       clearInterval(this.playerCheckInterval);\n\n      this.player = new window.Spotify.Player({\n        name: \"Shawna's Spotify Player\",\n        getOAuthToken: cb => { cb(token); },\n      });\n       this.createEventHandlers();\n\n      // finally, connect!\n      this.player.connect();\n    }\n  }\n\n  createEventHandlers() {\n    this.player.on('initialization_error', e => { console.error(e); });\n    this.player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({ loggedIn: false });\n    });\n    this.player.on('account_error', e => { console.error(e); });\n    this.player.on('playback_error', e => { console.error(e); });\n\n    // Playback status updates\n    this.player.on('player_state_changed', state => this.onStateChanged(state));\n     this.player.on('player_state_changed', state => { console.log(state); });\n\n    // Ready\n    this.player.on('ready', data => {\n      console.log(data)\n      let { device_id } = data;\n      console.log(\"Let the music play on!\");\n      this.setState({ deviceId: device_id });\n    });\n\n\n  }\n\n  render() {\n    const {\n      token,\n      loggedIn,\n      artistName,\n      trackName,\n      albumName,\n      error,\n      position,\n      duration,\n      playing,\n    } = this.state;\n\n  return (\n        <div>\n              <p>Artist: {artistName}</p>\n              <p>Track: {trackName}</p>\n              <p>Album: {albumName}</p>\n\n        </div>\n\n\n      );\n  }//end of render\n}//component end\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}